package main

templ index() {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<title>Spellbook</title>
			<script src="https://unpkg.com/htmx.org@2.0.0" integrity="sha384-wS5l5IKJBvK6sPTKa2WZ1js3d947pvWXbPJ1OmWfEuxLgeHcEbjUUA5i9V5ZkpCw" crossorigin="anonymous"></script>
			<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous"/>
		</head>
		<body class="container-fluid">
			// https://htmx.org/examples/active-search/
			// also trigger on load to show all spells initially
			<input
				class="form-control form-control-lg my-3"
				type="search"
				name="search"
				placeholder="Search..."
				hx-get="spells"
				hx-trigger="input changed delay:250ms, search, load"
				hx-target="#spellList"
			/>
			<div class="accordion accordion-flush" id="spellList"></div>
			<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
		</body>
	</html>
}

templ spellList(spells []Spell) {
	for _, spell := range spells {
		<div class="accordion-item">
			<h2 class="accordion-header">
				// trigger on mousedown and touchstart to act on press
				<button
					class="accordion-button collapsed"
					type="button"
					data-bs-toggle="collapse"
					data-bs-target={ "#collapse-" + spell.Id }
					aria-expanded="false"
					aria-controls={ "collapse-" + spell.Id }
					hx-get={ "spells/" + spell.Id }
					hx-trigger="mousedown once, touchstart once"
					hx-target={ "#collapse-" + spell.Id }
				>
					{ spell.Name }
				</button>
			</h2>
			<div
				id={ "collapse-" + spell.Id }
				class="accordion-collapse collapse"
			></div>
		</div>
	}
}

templ spellDetail(spell Spell) {
	<div class="accordion-body">
		<p><em>{ spell.LevelSchoolString() }</em></p>
		<p>
			<strong>Casting Time:</strong> { spell.CastingTimeString() }
			<br/>
			<strong>Range:</strong> { spell.RangeString() }
			<br/>
			<strong>Components:</strong> { spell.ComponentsString() }
			<br/>
			<strong>Duration:</strong> { spell.DurationString() }
		</p>
		@templ.Raw(spell.DescriptionString())
		if len(spell.HigherLevel) > 0 {
			<p><strong><em>At Higher Levels.</em></strong> { spell.HigherLevelString() }</p>
		}
	</div>
}
